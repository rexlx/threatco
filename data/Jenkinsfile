// Jenkinsfile (Declarative Pipeline)

pipeline {
    agent any

    environment {
        PATH = "/usr/local/go/bin:${env.PATH}"
        DOCKER_IMAGE_BASE_NAME = "your-docker-registry/your-repo/threatco" // << TODO: REPLACE with your actual registry/repo base name
    }

    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Git branch to build')
        string(name: 'IMAGE_TAG_PREFIX', defaultValue: 'dev', description: 'Prefix for the image tag (e.g., dev, staging, prod, or version number)')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "INFO: Checking out source code from branch ${params.GIT_BRANCH}..."
                    git url: 'https://github.com/rexlx/threatco.git', branch: params.GIT_BRANCH
                    sh 'git rev-parse HEAD > .git/commit-id'
                    def commitId = readFile('.git/commit-id').trim()
                    echo "Checked out Git commit: ${commitId}"
                    echo "INFO: Checkout complete."
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "INFO: Preparing to build Docker image..."
                    def commitId = readFile('.git/commit-id').trim()
                    def shortCommitId = commitId.substring(0, 7)
                    def commitTag = "${params.IMAGE_TAG_PREFIX}-${shortCommitId}"

                    withCredentials([file(credentialsId: 'threatco-config', variable: 'CONFIG_FILE_CONTENT_PATH')]) {
                        echo "INFO: Making Jenkins credential 'threatco-config' available as data/config.json for Docker build."
                        sh "mkdir -p data"
                        sh "cp ${CONFIG_FILE_CONTENT_PATH} data/config.json"
                        echo "WARNING: The content of 'threatco-config' is being copied into 'data/config.json' and will be baked into the Docker image. If it contains secrets, consider runtime mounting for production."
                    }

                    echo "INFO: Building Docker image ${env.DOCKER_IMAGE_BASE_NAME} with tags: ${commitTag}, latest..."
                    sh "docker build -t ${env.DOCKER_IMAGE_BASE_NAME}:${commitTag} -t ${env.DOCKER_IMAGE_BASE_NAME}:latest ."
                    
                    echo "INFO: Logging into Docker registry..."
                    // Example:
                    // withCredentials([usernamePassword(credentialsId: 'your-docker-registry-credentials-id', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    //    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin your-docker-registry.example.com"
                    // }
                    
                    echo "INFO: Pushing Docker image ${env.DOCKER_IMAGE_BASE_NAME}:${commitTag}..."
                    sh "docker push ${env.DOCKER_IMAGE_BASE_NAME}:${commitTag}"
                    echo "INFO: Pushing Docker image ${env.DOCKER_IMAGE_BASE_NAME}:latest..."
                    sh "docker push ${env.DOCKER_IMAGE_BASE_NAME}:latest"
                }
            }
            post {
                success {
                    echo 'INFO: Docker image build and push were successful.'
                }
                failure {
                    echo 'ERROR: Docker image build or push failed.'
                }
                always {
                    script {
                        echo "INFO: Cleaning up temporary data/config.json..."
                        sh "rm -f data/config.json"
                        sh "rmdir data || true"
                        echo "INFO: Logging out from Docker registry (if applicable)..."
                        // Example:
                        // sh "docker logout your-docker-registry.example.com"
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    // Placeholder for your staging deployment logic
                    // This would typically involve:
                    // 1. Accessing your staging environment (e.g., via SSH, kubectl context)
                    // 2. Pulling the new image (e.g., ${env.DOCKER_IMAGE_BASE_NAME}:latest or ${env.DOCKER_IMAGE_BASE_NAME}:${commitTag})
                    // 3. Stopping/removing the old container/pod
                    // 4. Running the new container/pod, potentially mounting a staging-specific config if needed.
                    //
                    // Example for a simple Docker host deployment (replace with your actual logic):
                    // def imageToDeploy = "${env.DOCKER_IMAGE_BASE_NAME}:latest"
                    // withCredentials([file(credentialsId: 'threatco-staging-config', variable: 'STAGING_CONFIG_FILE')]) { // If staging needs a specific config
                    //     sshagent(['your-ssh-credentials-id']) {
                    //         sh """
                    //             ssh your-user@your-staging-host.example.com <<EOF
                    //             echo 'Pulling new image...'
                    //             docker pull ${imageToDeploy}
                    //             echo 'Stopping and removing old container...'
                    //             docker stop threatco-staging || true
                    //             docker rm threatco-staging || true
                    //             echo 'Starting new container...'
                    //             # scp ${STAGING_CONFIG_FILE} your-user@your-staging-host.example.com:/opt/staging_configs/threatco/config.json # If you need to copy a new config
                    //             docker run -d --name threatco-staging \\
                    //               -p 8080:8080 \\
                    //               -v /opt/staging_configs/threatco/config.json:/app/config.json \\ # Mount the staging config
                    //               --restart always \\
                    //               ${imageToDeploy}
                    //             echo 'Deployment to staging host initiated.'
                    //             EOF
                    //         """
                    //     }
                    // }
                    echo "INFO: Deployment to Staging complete (placeholder)."
                }
            }
        }

        // Add a 'Deploy to Production' stage here when ready, similar to staging but with production configs/approvals.
    }

    post {
        always {
            echo 'INFO: Pipeline execution finished.'
            cleanWs()
        }
        success {
            echo 'SUCCESS: Pipeline completed successfully.'
            // Consider adding notifications here
        }
        failure {
            echo 'FAILURE: Pipeline failed.'
            // Consider adding notifications here
        }
        aborted {
            echo 'ABORTED: Pipeline was aborted.'
        }
    }
}
