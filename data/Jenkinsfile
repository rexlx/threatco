pipeline {
    agent { label 'dreadco' }

    environment {
        PATH = "/usr/local/go/bin:${env.PATH}"
        DOCKER_IMAGE_BASE_NAME = "threatco"
    }

    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'Git branch to build')
        string(name: 'IMAGE_TAG_PREFIX', defaultValue: 'dev', description: 'Prefix for the image tag (e.g., dev, staging, prod, or version number)')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "INFO: Checking out source code from branch ${params.GIT_BRANCH}..."
                    git url: 'https://github.com/rexlx/threatco.git', branch: params.GIT_BRANCH
                    sh 'git rev-parse HEAD > .git/commit-id'
                    def commitId = readFile('.git/commit-id').trim()
                    echo "Checked out Git commit: ${commitId}"
                    echo "INFO: Checkout complete."
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "INFO: Preparing to build Docker image..."
                    def commitId = readFile('.git/commit-id').trim()
                    def shortCommitId = commitId.substring(0, 7)
                    def commitTag = "${params.IMAGE_TAG_PREFIX}-${shortCommitId}"

                    withCredentials([file(credentialsId: 'threatco-config', variable: 'CONFIG_FILE_CONTENT_PATH')]) {
                        echo "INFO: Making Jenkins credential 'threatco-config' available as data/config.json for Docker build."
                        sh "mkdir -p data"
                        sh "cp ${CONFIG_FILE_CONTENT_PATH} data/config.json"
                        echo "WARNING: The content of 'threatco-config' is being copied into 'data/config.json' and will be baked into the Docker image. If it contains secrets, consider runtime mounting for production."
                    }

                    echo "INFO: Building Docker image ${env.DOCKER_IMAGE_BASE_NAME} with tags: ${commitTag}, latest..."
                    sh "docker build -t ${env.DOCKER_IMAGE_BASE_NAME}:${commitTag} -t ${env.DOCKER_IMAGE_BASE_NAME}:latest ."
                    
                    // echo "INFO: Logging into Docker registry..."
                    
                    // echo "INFO: Pushing Docker image ${env.DOCKER_IMAGE_BASE_NAME}:${commitTag}..."
                    // sh "docker push ${env.DOCKER_IMAGE_BASE_NAME}:${commitTag}"
                    // echo "INFO: Pushing Docker image ${env.DOCKER_IMAGE_BASE_NAME}:latest..."
                    // sh "docker push ${env.DOCKER_IMAGE_BASE_NAME}:latest"
                }
            }
            post {
                success {
                    echo 'INFO: Docker image build and push were successful.'
                }
                failure {
                    echo 'ERROR: Docker image build or push failed.'
                }
                always {
                    script {
                        echo "INFO: Cleaning up temporary data/config.json..."
                        sh "rm -f data/config.json"
                        sh "rmdir data || true"
                        echo "INFO: Logging out from Docker registry (if applicable)..."
                    }
                }
            }
        }

        stage('Deploy to Production (Example)') {
            steps {
                script {
                    echo "INFO: Initiating deployment to Production."
                    def imageToDeploy = "${env.DOCKER_IMAGE_BASE_NAME}:latest"

                    withCredentials([
                        string(credentialsId: 'PROD_DB_LOCATION', variable: 'PROD_DB_LOCATION'),
                        string(credentialsId: 'PROD_MISP_KEY', variable: 'PROD_MISP_KEY'),
                        string(credentialsId: 'PROD_VIRUSTOTAL_KEY', variable: 'PROD_VIRUSTOTAL_KEY')
                    ]) {
                        sh """
                        docker stop threatco-prod || true
                        docker rm threatco-prod || true
                        docker run -d --name threatco-prod \\
                                  -p 8081:8080 \\
                                  --restart always \\
                                  -e THREATCO_DB_LOCATION="${PROD_DB_LOCATION}" \\
                                  -e MISP_KEY="${PROD_MISP_KEY}" \\
                                  -e VIRUSTOTAL_KEY="${PROD_VIRUSTOTAL_KEY}" \\
                                  ${imageToDeploy}
                        """
                                echo "Deployment to production host initiated. ${imageToDeploy} is running in detached mode."
                    }
                    echo "INFO: Deployment to Production complete."
                }
            }
        }
    }

    post {
        always {
            echo 'INFO: Pipeline execution finished.'
            cleanWs()
        }
        success {
            echo 'SUCCESS: Pipeline completed successfully.'
        }
        failure {
            echo 'FAILURE: Pipeline failed.'
        }
        aborted {
            echo 'ABORTED: Pipeline was aborted.'
        }
    }
}
